import { Bot } from "grammy";
import { Order, OrderStatus } from "../entities/order.js";
import { AppContext } from "../interfaces.js";
import { AppDataSource } from "./database.js";
import { NotificationService } from "./notification.js";
import { User } from "../entities/user.js";
import { Subscription } from "../entities/subscription.js";

export class PaymentService {
  constructor(
    private bot: Bot<AppContext>,
    private notificationService: NotificationService
  ) {}

  async createInvoiceForSubscription(ctx: AppContext) {
    try {
      await ctx.api.sendInvoice(
        ctx.chat.id,
        "FOODBOX Premium –ø–æ–¥–ø–∏—Å–∫–∞",
        "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã",
        "subscription_1_month",
        process.env.PAYMENT_PROVIDER_TOKEN!,
        [{ label: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount: 29900 }], // 299 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        {
          provider_data: JSON.stringify({
            subscription_type: "premium_monthly",
          }),
          photo_url: "https://your-logo-url.com/logo.png", // URL –≤–∞—à–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
          photo_width: 500,
          photo_height: 500,
          need_name: false,
          need_phone_number: false,
          need_email: false,
          need_shipping_address: false,
          is_flexible: false,
        }
      );
    } catch (error) {
      console.error("Invoice creation error:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  }

  async processSubscriptionPayment(
    ctx: AppContext,
    paymentInfo: any
  ): Promise<boolean> {
    const userRepo = AppDataSource.getRepository(User);
    const subscriptionRepo = AppDataSource.getRepository(Subscription);

    try {
      const user = await userRepo.findOne({
        where: { telegramId: ctx.from?.id.toString() },
      });
      if (!user) throw new Error("User not found");

      const startDate = new Date();
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + 1);

      let subscription = await subscriptionRepo.findOne({ where: { user } });
      if (!subscription) {
        subscription = subscriptionRepo.create({
          user,
          startDate,
          endDate,
          isActive: true,
        });
      } else {
        subscription.startDate = startDate;
        subscription.endDate = endDate;
        subscription.isActive = true;
      }

      await subscriptionRepo.save(subscription);
      ctx.session.hasSubscription = true;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
      await this.notificationService.sendNotification(
        +user.telegramId,
        `üéâ –ü–æ–¥–ø–∏—Å–∫–∞ FOODBOX Premium —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n` +
          `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString()}\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.`
      );

      return true;
    } catch (error) {
      console.error("Subscription payment error:", error);
      return false;
    }
  }

  async createInvoiceForOrder(ctx: AppContext, order: Order) {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      const orderDescription =
        `–ó–∞–∫–∞–∑ #${order.orderNumber}\n` +
        `–î–æ—Å—Ç–∞–≤–∫–∞: ${order.deliveryAddress}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone}`;

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
      await ctx.api.sendInvoice(
        ctx.chat.id,
        `–ó–∞–∫–∞–∑ #${order.orderNumber}`,
        orderDescription,
        `order_${order.id}`,
        process.env.PAYMENT_PROVIDER_TOKEN!,
        [
          {
            label: `–ó–∞–∫–∞–∑ #${order.orderNumber}`,
            amount: Math.round(order.totalAmount * 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
          },
        ],
        {
          provider_data: JSON.stringify({
            order_id: order.id,
            order_number: order.orderNumber,
          }),
          photo_url: "https://your-logo-url.com/logo.png", // URL –≤–∞—à–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
          photo_width: 500,
          photo_height: 500,
          need_name: false,
          need_phone_number: false,
          need_email: false,
          need_shipping_address: false,
          is_flexible: false,
        }
      );
    } catch (error) {
      console.error("Invoice creation error:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  }

  async processOrderPayment(ctx: AppContext, paymentInfo: any) {
    const orderRepo = AppDataSource.getRepository(Order);
    const orderId = parseInt(paymentInfo.invoice_payload.split("_")[1]);

    try {
      const order = await orderRepo.findOne({
        where: { id: orderId },
        relations: ["user"],
      });

      if (!order) {
        throw new Error("Order not found");
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      order.status = OrderStatus.ACCEPTED;
      order.paymentId = paymentInfo.telegram_payment_charge_id;
      await orderRepo.save(order);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notificationService.sendNotification(
        +order.user.telegramId,
        `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n` +
          `–ú—ã –Ω–∞—á–∞–ª–∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`
      );

      return true;
    } catch (error) {
      console.error("Payment processing error:", error);
      return false;
    }
  }
}
