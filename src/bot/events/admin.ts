import { InlineKeyboard, Keyboard } from "grammy";
import { Category } from "../../entities/category.js";
import { Product } from "../../entities/product.js";
import { AppContext } from "../../interfaces.js";
import { AppDataSource } from "../../services/database.js";

export const adminEventsInit = async (
  ctx: AppContext,
  isAdmin: (ctx: AppContext) => boolean
) => {
  if (!isAdmin(ctx) || !ctx.session.adminAction) return;

  switch (ctx.session.adminAction) {
    case "add_product":
      await handleAddProduct(ctx);
      break;
    case "add_category":
      await handleAddCategory(ctx);
      break;
    case "edit_category":
      await handleEditCategory(ctx);
      break;
    case "edit_product_name":
    case "edit_product_description":
    case "edit_product_price":
    case "edit_product_subscription":
    case "edit_product_photo":
    case "edit_product_pername":
      await handleEditProduct(ctx);
      break;
  }
};

async function handleAddProduct(ctx: AppContext) {
  const categoryRepo = AppDataSource.getRepository(Category);

  if (!ctx.session.productData) {
    ctx.session.productData = {};
  }

  const productData = ctx.session.productData;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  if (!productData.name) {
    // –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
      return;
    }
    productData.name = ctx.message.text;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
  } else if (!productData.description) {
    // –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
      return;
    }
    productData.description = ctx.message.text;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");
  } else if (!productData.price) {
    // –®–∞–≥ 3: –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");
      return;
    }
    const price = parseFloat(ctx.message.text);
    if (isNaN(price)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:");
      return;
    }
    productData.price = price;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");
  } else if (!productData.subscriptionPrice) {
    // –®–∞–≥ 4: –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");
      return;
    }
    const subscriptionPrice = parseFloat(ctx.message.text);
    if (isNaN(subscriptionPrice)) {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:"
      );
      return;
    }
    productData.subscriptionPrice = subscriptionPrice;
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: 1 –∫–≥, 100 –≥, 1 –ª–æ—Ç–æ–∫ –∏ —Ç–¥):"
    );
  } else if (!productData.pername) {
    // –®–∞–≥ 5: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:");
      return;
    }
    productData.pername = ctx.message.text;

    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞: ");
  } else if (!productData.imageUrl) {
    // –®–∞–≥ 6: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞
    if (!ctx.message.photo) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:");
      return;
    }
    // –ü–æ–ª—É—á–∞–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π –±–æ–ª—å—à–æ–π) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    productData.imageUrl = photo.file_id;

    // –®–∞–≥ 7: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await categoryRepo.find();
    const keyboard = new InlineKeyboard();

    categories.forEach((category) => {
      keyboard.text(category.name, `admin_set_category_${category.id}`).row();
    });

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", {
      reply_markup: keyboard,
    });
  }
}

async function handleAddCategory(ctx: AppContext) {
  const categoryRepo = AppDataSource.getRepository(Category);

  const category = categoryRepo.create({
    name: ctx.message.text,
  });

  await categoryRepo.save(category);
  ctx.session.adminAction = undefined;

  const keyboard = new Keyboard().text("üîô –ù–∞–∑–∞–¥").resized();

  await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" —Å–æ–∑–¥–∞–Ω–∞`, {
    reply_markup: keyboard,
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function handleEditCategory(ctx: AppContext) {
  if (!ctx.session.adminEditingCategoryId) return;

  const categoryRepo = AppDataSource.getRepository(Category);
  const category = await categoryRepo.findOneBy({
    id: ctx.session.adminEditingCategoryId,
  });

  if (category) {
    const oldName = category.name;
    category.name = ctx.message.text;
    await categoryRepo.save(category);

    ctx.session.adminAction = undefined;
    ctx.session.adminEditingCategoryId = undefined;

    const keyboard = new Keyboard().text("üîô –ù–∞–∑–∞–¥").resized();

    await ctx.reply(
      `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n"${oldName}" ‚Üí "${category.name}"`,
      { reply_markup: keyboard }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleEditProduct(ctx: AppContext) {
  if (!ctx.session.adminEditingProductId) return;

  const productRepo = AppDataSource.getRepository(Product);
  const product = await productRepo.findOne({
    where: { id: ctx.session.adminEditingProductId },
    relations: ["category"],
  });

  if (!product) return;

  const action = ctx.session.adminAction;

  if (action === "edit_product_name" && ctx.message.text) {
    product.name = ctx.message.text;
  } else if (action === "edit_product_description" && ctx.message.text) {
    product.description = ctx.message.text;
  } else if (action === "edit_product_price" && ctx.message.text) {
    const price = parseFloat(ctx.message.text);
    if (isNaN(price)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:");
      return;
    }
    product.price = price;
  } else if (action === "edit_product_subscription" && ctx.message.text) {
    const subscriptionPrice = parseFloat(ctx.message.text);
    if (isNaN(subscriptionPrice)) {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:"
      );
      return;
    }
    product.subscriptionPrice = subscriptionPrice;
  } else if (action === "edit_product_pername" && ctx.message.text) {
    product.pername = ctx.message.text;
  } else if (action === "edit_product_photo" && ctx.message.photo) {
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    product.imageUrl = photo.file_id;
  } else {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
    return;
  }

  await productRepo.save(product);
  ctx.session.adminAction = undefined;
  ctx.session.adminEditingProductId = undefined;

  const keyboard = new InlineKeyboard()
    .text("‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", `edit_product_${product.id}`)
    .row()
    .text("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "admin_products_back");

  await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${product.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`, {
    reply_markup: keyboard,
  });
}
