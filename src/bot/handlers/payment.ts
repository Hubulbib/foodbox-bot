import { Bot } from "grammy";
import { AppContext } from "../../interfaces.js";
import { PaymentService } from "../../services/payment.js";
import { AppDataSource } from "../../services/database.js";
import { Order } from "../../entities/order.js";
export const setupPaymentHandlers = (
  bot: Bot<AppContext>,
  paymentService: PaymentService
) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  bot.on("pre_checkout_query", async (ctx) => {
    await ctx.answerPreCheckoutQuery(true);
  });

  // –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
  bot.on("message:successful_payment", async (ctx) => {
    const paymentInfo = ctx.message?.successful_payment;
    if (!paymentInfo) return;

    if (paymentInfo.invoice_payload.startsWith("subscription_")) {
      const success = await paymentService.processSubscriptionPayment(
        ctx,
        paymentInfo
      );

      if (success) {
        await ctx.reply(
          "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n" +
            "–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã."
        );
      } else {
        await ctx.reply(
          "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        );
      }
    } else if (paymentInfo.invoice_payload.startsWith("order_")) {
      const success = await paymentService.processOrderPayment(
        ctx,
        paymentInfo
      );

      if (success) {
        await ctx.reply(
          "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n" +
            "–ú—ã –Ω–∞—á–∞–ª–∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        );
      } else {
        await ctx.reply(
          "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        );
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
  bot.callbackQuery(/^pay_order_(\d+)$/, async (ctx) => {
    const orderId = parseInt(ctx.match[1]);

    const orderRepo = AppDataSource.getRepository(Order);
    const order = await orderRepo.findOne({
      where: { id: orderId },
      relations: ["user"],
    });

    if (!order) {
      await ctx.answerCallbackQuery("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    try {
      await paymentService.createInvoiceForOrder(ctx, order);
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  bot.callbackQuery("create_subscription", async (ctx) => {
    await ctx.answerCallbackQuery();

    try {
      await ctx.api.sendInvoice(
        ctx.chat.id,
        "FOODBOX Premium –ø–æ–¥–ø–∏—Å–∫–∞",
        "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã",
        "subscription_1_month",
        process.env.PAYMENT_PROVIDER_TOKEN!,
        [{ label: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount: 29900 }], // 299 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        {
          provider_data: JSON.stringify({
            subscription_type: "premium_monthly",
          }),
          photo_url: "https://your-logo-url.com/logo.png", // URL –≤–∞—à–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
          photo_width: 500,
          photo_height: 500,
          need_name: false,
          need_phone_number: false,
          need_email: false,
          need_shipping_address: false,
          is_flexible: false,
        }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  });
};
