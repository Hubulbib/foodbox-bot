import { Bot, InlineKeyboard, Keyboard } from "grammy";
import { AdminAction, AppContext } from "../../interfaces.js";
import { AppDataSource } from "../../services/database.js";
import { Product } from "../../entities/product.js";
import { Category } from "../../entities/category.js";
import {
  Order,
  ORDER_STATUS_EMOJI,
  OrderStatus,
} from "../../entities/order.js";
import { isAdmin } from "../bot.js";
import { User } from "../../entities/user.js";
import { Advice } from "../../entities/advice.js";
import { Subscription } from "../../entities/subscription.js";
import { checkSubscription } from "../../utils/helpers.js";

export const setupAdminCommands = async (bot: Bot<AppContext>) => {
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  bot.command("admin", async (ctx) => {
    if (!isAdmin(ctx)) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏");
      return;
    }

    const keyboard = new Keyboard()
      .text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
      .row()
      .text("üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
      .row()
      .text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
      .row()
      .text("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞–º–∏")
      .row()
      .text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
      .row()
      .text("‚óÄÔ∏è –ù–∞–∑–∞–¥")
      .resized();

    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", {
      reply_markup: keyboard,
    });
  });

  bot.hears("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", async (ctx) => {
    if (!isAdmin(ctx)) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏");
      return;
    }

    const keyboard = new Keyboard()
      .text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
      .row()
      .text("üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
      .row()
      .text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
      .row()
      .text("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞–º–∏")
      .row()
      .text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
      .row()
      .text("‚óÄÔ∏è –ù–∞–∑–∞–¥")
      .resized();

    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", {
      reply_markup: keyboard,
    });
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
  bot.hears("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const keyboard = new Keyboard()
      .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
      .row()
      .text("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
      .row()
      .text("üîô –ù–∞–∑–∞–¥");

    await ctx.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n" + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: keyboard,
    });
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", async (ctx) => {
    if (!isAdmin(ctx)) return;

    ctx.session.adminAction = "add_product";
    ctx.session.productData = {};
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  bot.hears("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const productRepo = AppDataSource.getRepository(Product);
    const products = await productRepo.find({
      relations: ["category"],
      order: { name: "ASC" },
    });

    if (products.length === 0) {
      await ctx.reply("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç");
      return;
    }

    const message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n";
    const keyboard = new InlineKeyboard();

    products.forEach((product) => {
      keyboard
        .text(
          `${product.name} (${product.price} —Ä—É–±.)`,
          `edit_product_${product.id}`
        )
        .row();
    });

    keyboard.text("üîô –ù–∞–∑–∞–¥", "admin_products_back");

    await ctx.reply(message, {
      reply_markup: keyboard,
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.callbackQuery(/^edit_product_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const productId = parseInt(ctx.match[1]);
    const productRepo = AppDataSource.getRepository(Product);
    const product = await productRepo.findOne({
      where: { id: productId },
      relations: ["category"],
    });

    if (product) {
      const keyboard = new InlineKeyboard()
        .text("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", `edit_product_name_${product.id}`)
        .text("üìù –û–ø–∏—Å–∞–Ω–∏–µ", `edit_product_description_${product.id}`)
        .row()
        .text("üí∞ –¶–µ–Ω–∞", `edit_product_price_${product.id}`)
        .text("üí≥ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏", `edit_product_subscription_${product.id}`)
        .row()
        .text("üñº –§–æ—Ç–æ", `edit_product_photo_${product.id}`)
        .text("üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è", `edit_product_category_${product.id}`)
        .row()
        .text("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", `delete_product_${product.id}`)
        .text("üîô –ù–∞–∑–∞–¥", "admin_products_back");

      await ctx.editMessageText(
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n` +
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}\n` +
          `–¶–µ–Ω–∞: ${product.price} —Ä—É–±.\n` +
          `–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${product.subscriptionPrice} —Ä—É–±.\n` +
          `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name || "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"}\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`,
        { reply_markup: keyboard }
      );
    }
  });

  bot.callbackQuery(/^delete_product_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const productId = parseInt(ctx.match[1]);

    const productRepo = AppDataSource.getRepository(Product);
    const product = await productRepo.findOneBy({ id: productId });

    if (!product) {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    await productRepo.delete(productId);

    await ctx.editMessageText("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  bot.callbackQuery(/^edit_product_(.+)_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const field = ctx.match[1];
    const productId = parseInt(ctx.match[2]);

    ctx.session.adminAction = `edit_product_${field}` as AdminAction;
    ctx.session.adminEditingProductId = productId;

    switch (field) {
      case "name":
        await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
        break;
      case "description":
        await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
        break;
      case "price":
        await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):");
        break;
      case "subscription":
        await ctx.editMessageText(
          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        );
        break;
      case "photo":
        await ctx.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:");
        break;
      case "category":
        const categoryRepo = AppDataSource.getRepository(Category);
        const categories = await categoryRepo.find();
        const keyboard = new InlineKeyboard();

        categories.forEach((category) => {
          keyboard
            .text(
              category.name,
              `set_product_category_${productId}_${category.id}`
            )
            .row();
        });

        await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
          reply_markup: keyboard,
        });
        break;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  bot.callbackQuery(/^set_product_category_(\d+)_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const productId = parseInt(ctx.match[1]);
    const categoryId = parseInt(ctx.match[2]);

    const productRepo = AppDataSource.getRepository(Product);
    const categoryRepo = AppDataSource.getRepository(Category);
    const product = await productRepo.findOne({
      where: { id: productId },
      relations: ["category"],
    });
    const category = await categoryRepo.findOneBy({ id: categoryId });

    if (product && category) {
      product.category = category;
      await productRepo.save(product);

      await ctx.editMessageText(
        `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ "${product.name}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${category.name}"`
      );
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  bot.hears("üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", async (ctx) => {
    if (!isAdmin(ctx)) return;
    const keyboard = new Keyboard()
      .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
      .row()
      .text("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
      .row()
      .text("üîô –ù–∞–∑–∞–¥")
      .resized();

    await ctx.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:\n\n" + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: keyboard,
    });
  });

  bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", async (ctx) => {
    if (!isAdmin(ctx)) return;

    ctx.session.adminAction = "add_category";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
  });

  bot.hears("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const categoryRepo = AppDataSource.getRepository(Category);
    const categories = await categoryRepo.find({
      relations: { products: true },
    });

    const message = "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n";

    const backKeyboard = new Keyboard().text("üîô –ù–∞–∑–∞–¥").resized();

    await ctx.reply(message, {
      reply_markup: backKeyboard,
    });

    await Promise.all(
      categories.map(async (category) => {
        const keyboard = new InlineKeyboard()
          .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `edit_category_${category.id}`)
          .text("üóë –£–¥–∞–ª–∏—Ç—å", `delete_category_${category.id}`);

        const message = `${category.name} (—Ç–æ–≤–∞—Ä–æ–≤: ${category.products.length})\n`;

        await ctx.reply(message, {
          reply_markup: keyboard,
        });
      })
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  bot.callbackQuery(/^edit_category_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const categoryId = parseInt(ctx.match[1]);
    const categoryRepo = AppDataSource.getRepository(Category);
    const category = await categoryRepo.findOneBy({ id: categoryId });

    if (category) {
      ctx.session.adminAction = "edit_category";
      ctx.session.adminEditingCategoryId = categoryId;

      await ctx.editMessageText(
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  bot.callbackQuery(/^delete_category_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const categoryId = parseInt(ctx.match[1]);
    const categoryRepo = AppDataSource.getRepository(Category);
    const category = await categoryRepo.findOne({
      where: { id: categoryId },
      relations: { products: true },
    });

    if (category) {
      // if (category.products.length > 0) {
      //   await ctx.editMessageText(
      //     `‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.name}"\n–í –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã (${category.products.length} —à—Ç.)`,
      //     {
      //       reply_markup: new InlineKeyboard()
      //         .text("üîô –ù–∞–∑–∞–¥", "admin_categories")
      //     }
      //   );
      //   return;
      // }

      await categoryRepo.delete(categoryId);
      await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
  bot.hears("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const keyboard = new InlineKeyboard()
      .text("üõ†Ô∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "filter_orders_processing")
      .text("‚úÖ –ü—Ä–∏–Ω—è—Ç", "filter_orders_accepted")
      .row()
      .text("üì¶ –°–±–æ—Ä–∫–∞", "filter_orders_assembling")
      .text("üöö –ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É", "filter_orders_courier")
      .row()
      .text("üö¥ –í –ø—É—Ç–∏", "filter_orders_transit")
      .text("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "filter_orders_delivered")
      .text("‚ùå –û—Ç–º–µ–Ω—ë–Ω", "filter_orders_canceled")
      .row()
      .text("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", "filter_orders_all")
      .row()
      .text("üîô –ù–∞–∑–∞–¥", "admin_back");

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", {
      reply_markup: keyboard,
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  bot.callbackQuery(/^filter_orders_(.+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const getStatus = (): OrderStatus | null => {
      switch (ctx.match[1]) {
        case "processing":
          return OrderStatus.PROCESSING;
        case "accepted":
          return OrderStatus.ACCEPTED;
        case "assembling":
          return OrderStatus.ASSEMBLING;
        case "courier":
          return OrderStatus.TRANSFERRED_TO_COURIER;
        case "transit":
          return OrderStatus.IN_TRANSIT;
        case "delivered":
          return OrderStatus.DELIVERED;
        case "canceled":
          return OrderStatus.CANCELED;
        case "all":
          return null;
      }
    };

    const status = getStatus();
    const orderRepo = AppDataSource.getRepository(Order);

    const where = status === null ? {} : { status };

    const orders = await orderRepo.find({
      where,
      relations: ["user", "items", "items.product"],
      order: { createdAt: "DESC" },
      take: 10,
    });

    const message = `–ó–∞–∫–∞–∑—ã${
      status === null ? "" : ` (—Å—Ç–∞—Ç—É—Å: ${status})`
    }:\n\n`;

    await ctx.reply(message);

    for (const order of orders) {
      const statusEmoji = ORDER_STATUS_EMOJI[order.status];

      const message =
        `–ó–∞–∫–∞–∑ #${order.orderNumber}\n` +
        `–í—Ä–µ–º—è: ${new Intl.DateTimeFormat("ru-RU", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        }).format(order.createdAt)}\n` +
        `–°—Ç–∞—Ç—É—Å: ${statusEmoji} ${order.status}\n` +
        `–°—É–º–º–∞: ${order.totalAmount} —Ä—É–±.\n` +
        `–ö–ª–∏–µ–Ω—Ç: ${order.customerName}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone}\n` +
        `–ê–¥—Ä–µ—Å: ${order.deliveryAddress}\n\n` +
        `–ñ–ö: ${order.residentialComplex}\n\n`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const statusKeyboard = new InlineKeyboard();
      const availableStatuses = {
        PROCESSING: "üõ†Ô∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        ACCEPTED: "‚úÖ –ü—Ä–∏–Ω—è—Ç",
        ASSEMBLING: "üì¶ –°–±–æ—Ä–∫–∞",
        TRANSFERRED_TO_COURIER: "üöö –ü–µ—Ä–µ–¥–∞–Ω –∫—É—å–µ—Ä—É",
        IN_TRANSIT: "üö¥ –í –ø—É—Ç–∏",
        DELIVERED: "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
      };

      Object.entries(availableStatuses).forEach(
        ([statusKey, statusText], ind) => {
          if (statusKey !== order.status) {
            statusKeyboard.text(
              statusText,
              `change_status_${order.id}_${statusKey}`
            );
            if (ind % 2 !== 0) statusKeyboard.row();
          }
        }
      );

      statusKeyboard.row().text("üîô –ù–∞–∑–∞–¥", "admin_back");

      await ctx.reply(message, {
        reply_markup: statusKeyboard,
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  bot.callbackQuery(/^change_status_(\d+)_(.+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const orderId = parseInt(ctx.match[1]);
    const newStatus = OrderStatus[ctx.match[2]];

    const orderRepo = AppDataSource.getRepository(Order);
    const order = await orderRepo.findOneBy({ id: orderId });

    if (order) {
      order.status = newStatus;
      await orderRepo.save(order);

      const statusEmoji = ORDER_STATUS_EMOJI[newStatus];

      await ctx.editMessageText(
        `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${order.orderNumber} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${statusEmoji} ${newStatus}`
      );
    }
  });

  bot.hears("üîô –ù–∞–∑–∞–¥", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const keyboard = new Keyboard()
      .text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
      .row()
      .text("üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
      .row()
      .text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
      .row()
      .text("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞–º–∏")
      .row()
      .text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
      .row()
      .text("‚óÄÔ∏è –ù–∞–∑–∞–¥")
      .resized();

    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", {
      reply_markup: keyboard,
    });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  bot.callbackQuery(/^admin_set_category_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const categoryId = parseInt(ctx.match[1]);
    const productData = ctx.session.productData;

    if (productData) {
      const productRepo = AppDataSource.getRepository(Product);
      const categoryRepo = AppDataSource.getRepository(Category);
      const category = await categoryRepo.findOneBy({ id: categoryId });

      if (category) {
        const product = productRepo.create({
          name: productData.name,
          description: productData.description,
          price: productData.price,
          subscriptionPrice: productData.subscriptionPrice,
          imageUrl: productData.imageUrl,
          category: category,
        });

        await productRepo.save(product);

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        ctx.session.adminAction = undefined;
        ctx.session.productData = undefined;

        const keyboard = new Keyboard().text("üîô –ù–∞–∑–∞–¥").resized();

        await ctx.reply(
          `‚úÖ –¢–æ–≤–∞—Ä "${product.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.name}"`,
          { reply_markup: keyboard }
        );
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
  bot.callbackQuery("admin_products_back", async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const keyboard = new Keyboard()
      .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
      .row()
      .text("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
      .row()
      .text("üîô –ù–∞–∑–∞–¥");

    await ctx.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: keyboard,
    });
  });

  bot.callbackQuery("admin_back", async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const keyboard = new Keyboard()
      .text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
      .row()
      .text("üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
      .row()
      .text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
      .row()
      .text("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞–º–∏")
      .row()
      .text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
      .row()
      .text("‚óÄÔ∏è –ù–∞–∑–∞–¥")
      .resized();

    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", {
      reply_markup: keyboard,
    });
  });

  bot.hears("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞–º–∏", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const adviceRepo = AppDataSource.getRepository(Advice);
    const advices = await adviceRepo.find({
      relations: ["user"],
      order: { createdAt: "DESC" },
      take: 10,
      skip: 0,
    });
    const totalAdvices = await adviceRepo.count();

    let message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n";
    for (const advice of advices) {
      message += `üìù ${advice.text}\nüë§ ${
        advice.user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      } | ${advice.createdAt.toLocaleString("ru-RU")}\n\n`;
    }

    const keyboard = new InlineKeyboard();
    if (totalAdvices > 10) {
      keyboard.text("üì• –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", "load_more_advices_10");
    }
    keyboard.text("üîô –ù–∞–∑–∞–¥", "admin_back");

    await ctx.reply(message, {
      reply_markup: keyboard,
    });
  });

  bot.callbackQuery(/^load_more_advices_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const skip = parseInt(ctx.match[1]);
    const adviceRepo = AppDataSource.getRepository(Advice);
    const advices = await adviceRepo.find({
      relations: ["user"],
      order: { createdAt: "DESC" },
      take: 10,
      skip,
    });
    const totalAdvices = await adviceRepo.count();

    let message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n";
    for (const advice of advices) {
      message += `üìù ${advice.text}\nüë§ ${
        advice.user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      } | ${advice.createdAt.toLocaleString("ru-RU")}\n\n`;
    }

    const keyboard = new InlineKeyboard();
    if (totalAdvices > skip + 10) {
      keyboard.text("üì• –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", `load_more_advices_${skip + 10}`);
    }
    keyboard.text("üîô –ù–∞–∑–∞–¥", "admin_back");

    await ctx.editMessageText(message, {
      reply_markup: keyboard,
    });
  });

  bot.hears("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const userRepo = AppDataSource.getRepository(User);
    const users = await userRepo.find({
      where: { subscription: { isActive: true } },
      relations: ["subscription"],
      order: { id: "DESC" },
      take: 10,
      skip: 0,
    });

    if (users.length === 0) {
      const keyboard = new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "admin_back");

      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–∫–∞ –Ω–µ—Ç", {
        reply_markup: keyboard,
      });
      return;
    }

    let message = "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:*\n\n";

    for (const user of users) {
      const subscriptionRepo = AppDataSource.getRepository(Subscription);
      const subscription = (
        await subscriptionRepo.findOne({
          where: { userId: user.id },
          order: { endDate: "DESC" },
        })
      )[0];

      if (subscription && (await checkSubscription(user.id))) {
        const subscriptionEndDate =
          new Intl.DateTimeFormat("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          }).format(subscription.endDate) || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
        const daysLeft = user.subscription
          ? Math.ceil(
              (subscription.endDate.getTime() - Date.now()) /
                (1000 * 60 * 60 * 24)
            )
          : 0;

        message +=
          `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${user.id}*\n` +
          `üì± Telegram ID: ${user.telegramId}\n` +
          `üë§ –ò–º—è: ${user.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
          `üìç –ê–¥—Ä–µ—Å: ${user.address || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
          `üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${subscriptionEndDate}\n` +
          `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n\n`;
      }
    }

    const keyboard = new InlineKeyboard();

    // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    const totalUsers = await userRepo.count({
      where: { subscription: { isActive: true } },
    });

    if (totalUsers > 10) {
      keyboard.text("üì• –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", "load_more_users_10");
    }

    keyboard.text("üîô –ù–∞–∑–∞–¥", "admin_back");

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
  bot.callbackQuery(/^load_more_users_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const skip = parseInt(ctx.match[1]);
    const userRepo = AppDataSource.getRepository(User);

    const users = await userRepo.find({
      where: { subscription: { isActive: true } },
      relations: ["subscription"],
      order: { id: "DESC" },
      take: 10,
      skip: skip,
    });

    let message = "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:*\n\n";

    for (const user of users) {
      const subscriptionRepo = AppDataSource.getRepository(Subscription);
      const subscription = (
        await subscriptionRepo.findOne({
          where: { userId: user.id },
          order: { endDate: "DESC" },
        })
      )[0];

      if (subscription && (await checkSubscription(user.id))) {
        const subscriptionEndDate =
          new Intl.DateTimeFormat("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          }).format(subscription.endDate) || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
        const daysLeft = user.subscription
          ? Math.ceil(
              (subscription.endDate.getTime() - Date.now()) /
                (1000 * 60 * 60 * 24)
            )
          : 0;

        message +=
          `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${user.id}*\n` +
          `üì± Telegram ID: ${user.telegramId}\n` +
          `üë§ –ò–º—è: ${user.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
          `üìç –ê–¥—Ä–µ—Å: ${user.address || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
          `üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${subscriptionEndDate}\n` +
          `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n\n`;
      }
    }

    const keyboard = new InlineKeyboard();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const totalUsers = await userRepo.count({
      where: { subscription: { isActive: true } },
    });

    if (totalUsers > skip + 10) {
      keyboard.text("üì• –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", `load_more_users_${skip + 10}`);
    }

    keyboard.text("üîô –ù–∞–∑–∞–¥", "admin_back");

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  });
};
