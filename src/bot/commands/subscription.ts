import { Bot, InlineKeyboard } from "grammy";
import { AppContext } from "../../interfaces.js";
import { AppDataSource } from "../../services/database.js";
import { Subscription } from "../../entities/subscription.js";
import { User } from "../../entities/user.js";
import { CONSTANTS } from "../../const.js";

export const setupSubscriptionCommands = async (bot: Bot<AppContext>) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  bot.callbackQuery("menu_subscription", async (ctx) => {
    await ctx.answerCallbackQuery();

    const message = CONSTANTS.SUBSCRIPTION_TEXT;

    const keyboard = new InlineKeyboard();

    if (ctx.session.hasSubscription) {
      keyboard.text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞", "already_subscribed");
    } else {
      keyboard
        .text("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription")
        .row()
        .text("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "subscription_info");
    }

    keyboard.row().text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu");

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  });

  // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  bot.callbackQuery("create_subscription", async (ctx) => {
    const keyboard = new InlineKeyboard().text(
      "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
      "back_to_menu"
    );

    await ctx.reply("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", {
      reply_markup: keyboard,
    });

    // await ctx.answerCallbackQuery();

    // const userRepo = AppDataSource.getRepository(User);
    // const subscriptionRepo = AppDataSource.getRepository(Subscription);

    // const user = await userRepo.findOne({
    //   where: { telegramId: ctx.from?.id },
    // });

    // if (!user) {
    //   await ctx.editMessageText("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    //   return;
    // }

    // const newSubscription = subscriptionRepo.create({
    //   user,
    //   startDate: new Date(),
    //   endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 –¥–Ω–µ–π
    //   isActive: true,
    // });

    // await subscriptionRepo.save(newSubscription);
    // ctx.session.hasSubscription = true;

    // const keyboard = new InlineKeyboard().text(
    //   "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
    //   "back_to_menu"
    // );

    // await ctx.editMessageText(
    //   `üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n` +
    //     `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${newSubscription.endDate.toLocaleDateString()}`,
    //   {
    //     parse_mode: "HTML",
    //     reply_markup: keyboard,
    //   }
    // );
  });

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
  bot.callbackQuery("subscription_info", async (ctx) => {
    await ctx.answerCallbackQuery();

    const keyboard = new InlineKeyboard()
      .text("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription")
      .row()
      .text("üîô –ù–∞–∑–∞–¥", "menu_subscription");

    await ctx.editMessageText(
      `‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n` +
        `‚Ä¢ –°–∫–∏–¥–∫–∞ 10-30% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n` +
        `‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1000 —Ä—É–±.\n` +
        `‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n` +
        `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n` +
        `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –∞–∫—Ü–∏—è–º\n\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±./–º–µ—Å—è—Ü`,
      {
        parse_mode: "HTML",
        reply_markup: keyboard,
      }
    );
  });
};
